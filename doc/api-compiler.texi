@c -*-texinfo-*-
@c This file is part of Guile-SMC Reference Manual.
@c Copyright (C) 2021-2023 Artyom V. Poptsov
@c See the file guile-smc.texi for copying conditions.

@node Compiler
@section Compiler
@cindex Compiler

The Guile-SMC finite state machines generated from a PlantUML format can be
used for their purpose ``as is''.  But it can be costly to read a PlantUML
@acronym{FSM, Finite-State Machine} description each time a program run.

To solve this problem Guile-SMC provides a compiler that can translate the
internal representation of a state machine into a Scheme code.

The procedures below are defined in @code{(smc compiler)} module.

@deffn {Scheme Procedure} fsm-compile fsm @
               [#:fsm-name='custom-fsm]   @
               [#:fsm-module=#f]          @
               [#:extra-modules='()]      @
               [#:target='guile]          @
               [#:output-port=(current-output-port)]

Compile a @var{fsm} into a Scheme module.

Named parameters:

@table @asis
@item #:fsm-name (name <symbol>)
Set the name for the output finite state machine. Basically the name turns to
the FSM class (like @code{<custom-fsm>} for the default value.)

@item #:fsm-module (module <list>)
@itemx #:fsm-module (module <boolean>)
The module to place the output FSM into. The value must be a list like
@code{(my-parser my-fsm)} or #f if the @code{define-module} part should be
omitted.

@item #:extra-modules (modules-list <list>)
A list of extra modules that required to run the output FSM.  These modules are
added to to the output FSM module requirements.

@item #:output-port (port <port>)
The port to write the output FSM to.

@item #:target (value <symbol>)
The compilation target.  Allowed values are:
@table @asis
@item guile
This is the default mode.  The output FSM will depend on Guile-SMC and won't
work if it is not installed on a target system.
@item guile-standalone
This target allows to create a single file FSM that does not depend on
Guile-SMC in any way.

The compiler collects the required code from Guile-SMC and then removes all
unused parts from it, then the code is being printed to a @var{output-port}.
@end table

@end table

Usage example:

@lisp
(fsm-compile (puml->fsm (current-input-port)
                        #:module (puml-modules '((context))))
             #:fsm-name      'custom-fsm
             #:fsm-module    '(custom-fsm)
             #:extra-modules '((context)))
@end lisp

@end deffn

@c --------------------------------------------------------------------------------
@subsection Common Guile Compiler Code
@code{(smc compiler guile-common)} module contains the common code for the
Guile FSM compiler.

@deffn {Scheme Procedure} form-feed port
Write a form feed symbol with the following newline to a @var{port}.
@end deffn

@deffn {Scheme Procedure} write-header port
Write a header commentary to a @var{port}.
@end deffn

@deffn {Scheme Procedure} write-section-header description port
Write a section to a @var{port}.
@end deffn

@deffn {Scheme Procedure} write-footer file-name port
Write a file footer to a @var{port}.
@end deffn

@deffn {Scheme Procedure} write-parent-fsm-info (fsm <fsm>) (port <port>)
Print the information about the parent FSM for a @var{fsm} to a @var{port}.
@end deffn

@c --------------------------------------------------------------------------------
@subsection Guile
@code{(smc compiler guile)} module contains the code for ``guile'' compiler
target.

@deffn {Scheme Procedure} write-module module @
       [#:extra-modules] @
       [#:class-name] @
       [#:port] @
       [#:standalone-mode=#f]

Write a @code{define-module} part to a @var{port}.  @var{class-name} is used
to export a FSM class in the @code{#:export} part.  @var{extra-modules} allow
to specify a list of extra modules that required for the output FSM to work.

@end deffn

@deffn {Scheme Procedure} write-use-modules extra-modules port

Write @code{use-modules} section to the @var{port}.

@end deffn

@deffn {Scheme Procedure} write-transition-table (fsm <fsm>) (port <port>)

Write a @var{fsm} transition table to a @var{port}.

@end deffn

@deffn {Scheme Procedure} write-define-class class-name port

Write @code{define-class} for a @var{class-name} to a @var{port}.

@end deffn

@deffn {Scheme Procedure} write-initialize fsm class-name port

Write the class constructor for @var{class-name} to the @var{port}.

@end deffn

@c --------------------------------------------------------------------------------
@subsection Guile Standalone
@code{(smc compiler guile-standalone)} module contains the code for
``guile-standalone'' target.

@deffn {Scheme Procedure} state->standalone-code (fsm <fsm>) (state <list>)
Convert a @var{state} to a plain Scheme @code{define} that does not depend on
Guile-SMC.
@end deffn

@deffn {Scheme Procedure} fsm-transition-table->standalone-code (fsm <fsm>)
Convert a @var{fsm} transition table to a list of Scheme procedures that do
not depend on Guile-SMC.
@end deffn

@deffn {Scheme Procedure} string-drop-both str
Drop one symbol from both left and right parts of a string @var{str}
@end deffn

@deffn {Scheme Procedure} fsm-define-module fsm fsm-name module @
       [#:extra-modules]

Generate a @code{define-module} code for an @var{fsm}.

@end deffn

@deffn {Scheme Procedure} tree-contains? root element
Check if a @var{root} contains an @var{element}.
@end deffn

@deffn {Scheme Procedure} prune-unused-definitions definitions hardwired-definitions

Remove all the definitions from the @var{definitions} list that are not used
neither in the @var{definitions} nor @var{hardwired-definitions} lists.

@end deffn

@deffn {Scheme Procedure} fsm-get-context-code guile-smc-modules-path @
       [#:type=#f] @
       [#:skip-define-module?=#t]

Read the Guile-SCM context from the @var{guile-smc-modules-path} and return
the code as a list.

@end deffn

@deffn {Scheme Procedure} fsm-get-class-code fsm-name
Generate class code for an @var{fsm-name}.
@end deffn

@deffn {Scheme Procedure} fsm->standalone-code (fsm <fsm>) fsm-name
Convert an @var{fsm} to a procedure that does not depend on Guile-SMC.
@end deffn

@c --------------------------------------------------------------------------------
@subsection Examples

For more examples, take a look into @file{examples/compiler} directory in the
project repository.

@c Local Variables:
@c TeX-master: "guile-smc.texi"
@c End:
