@c -*-texinfo-*-
@c This file is part of Guile-SMC Reference Manual.
@c Copyright (C) 2021-2022 Artyom V. Poptsov
@c See the file guile-smc.texi for copying conditions.

@node Compiler
@section Compiler
@cindex Compiler

The Guile-SMC finite state machines generated from a PlantUML format can be
used for their purpose ``as is''.  But it can be costly to read a PlantUML
@acronym{FSM, Finite-State Machine} description each time a program run.

To solve this problem Guile-SMC provides a compiler that can translate the
internal representation of a state machine into a Scheme code.

The procedures below are defined in @code{(smc compiler)} module.

@deffn {Scheme Procedure} fsm-compile fsm @
               [#:fsm-name='custom-fsm]   @
               [#:fsm-module=#f]          @
               [#:extra-modules='()]      @
               [#:target='guile]          @
               [#:output-port=(current-output-port)]

Compile a @var{fsm} into a Scheme module.

Named parameters:

@table @asis
@item #:fsm-name (name <symbol>)
Set the name for the output finite state machine. Basically the name turns to
the FSM class (like @code{<custom-fsm>} for the default value.)

@item #:fsm-module (module <list>)
@itemx #:fsm-module (module <boolean>)
The module to place the output FSM into. The value must be a list like
@code{(my-parser my-fsm)} or #f if the @code{define-module} part should be
omitted.

@item #:extra-modules (modules-list <list>)
A list of extra modules that required to run the output FSM.  These modules are
added to to the output FSM module requirements.

@item #:output-port (port <port>)
The port to write the output FSM to.

@item #:target (value <symbol>)
The compilation target.  Allowed values are:
@table @asis
@item guile
This is the default mode.  The output FSM will depend on Guile-SMC and won't
work if it is not installed on a target system.
@item guile-standalone
This target allows to create a single file FSM that does not depend on
Guile-SMC in any way.

The compiler collects the required code from Guile-SMC and then removes all
unused parts from it, then the code is being printed to a @var{output-port}.
@item guile-standalone-copy
Copy Guile-SMC core modules to a directory with the same name as the
@var{fsm-name} and re-write all the modules such that each Guile-SMC module
that is used by the output FSM points to the directory.

This allows to create a FSM that does not depend on presence of Guile-SMC on a
target system while keep the default Guile-SMC output FSM format.
@end table

@end table

Usage example:

@lisp
(fsm-compile (puml->fsm (current-input-port)
                        #:module (puml-modules '((context))))
             #:fsm-name      'custom-fsm
             #:fsm-module    '(custom-fsm)
             #:extra-modules '((context)))
@end lisp

@end deffn

@c --------------------------------------------------------------------------------
@subsection Examples

For more examples, take a look into @file{examples/compiler} directory in the
project repository.

@c Local Variables:
@c TeX-master: "guile-smc.texi"
@c End:
