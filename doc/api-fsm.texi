@c -*-texinfo-*-
@c This file is part of Guile-SMC Reference Manual.
@c Copyright (C) 2021-2023 Artyom V. Poptsov
@c See the file guile-smc.texi for copying conditions.

@node FSM
@section FSM
@cindex FSM

@c -----------------------------------------------------------------------------
@subsection The main class

@deftp {Class} <fsm> @
       [#:description=#f] @
       [#:debug-mode?=#f] @
       [#:transition-table='()] @
       [#:event-source=(labmda (context) #t)] @
       [#:current-state=#f]

The main class that describes a finite state machine.

@table @asis
@item #:current-state (state <state>)
@strong{required} Current FSM state.

@item #:description (str <string>)
Optional custom human-readable description for the finite-state machine.

@item #:debug-mode? (enabled? <boolean>)
Is the debug mode enabled?

@item #:transition-table (table <hash-table>)
A transition table.

@item #:event-source (proc <procedure>)
Global state machine event source.  The event source is a procedure that
accepts a context and returns a next event.

The default value of this parameter is a procedure that always returns
@code{#t}.

@end table

@end deftp

@c -----------------------------------------------------------------------------
@subsection Public API

@deffn {Scheme Procedure} fsm? (object <top>)
Check if an @var{object} is an instance of @code{<fsm>} class.
@end deffn

@deffn {Scheme Procedure} fsm-description (fsm <fsm>)
Get the @var{fsm} description.
@end deffn

@deffn {Scheme Procedure} fsm-description-set! (fsm <fsm>) (description <string>)
Set the @var{fsm} description.
@end deffn

@deffn {Scheme Procedure} fsm-debug-mode? (fsm <fsm>)
Check if the debug mode is enabled for @var{fsm}.
@end deffn

@deffn {Scheme Procedure} fsm-debug-mode-set! (fsm <fsm>) (value <boolean>)
Set the debug mode state for @var{fsm}.
@end deffn

@deffn {Scheme Procedure} fsm-transition-table (fsm <fsm>)
Get the @var{fsm} transition table.
@end deffn

@deffn {Scheme Procedure} fsm-transition-table-set! (fsm <fsm>) (table <hash-table>)
Set the @var{fsm} transition hash table.
@end deffn

@deffn {Scheme Procedure} fsm-event-source (fsm <fsm>)
Get the @var{fsm} event source procedure.
@end deffn

@deffn {Scheme Procedure} fsm-event-source-set! (fsm <fsm>) (proc <procedure>)
Set the @var{fsm} event source procedure.
@end deffn

@deffn {Scheme Procedure} fsm-current-state (fsm <fsm>)
Get the @var{fsm} current state.
@end deffn

@deffn {Scheme Procedure} fsm-current-state-set! (fsm <fsm>) (state <state>)
Set the @var{fsm} current state.
@end deffn

@deffn {Scheme Procedure} fsm-step-counter (fsm <fsm>)
Get the @var{fsm} step counter value.
@end deffn

@deffn {Scheme Procedure} fsm-step-counter-set! (fsm <fsm>) (value <number>)
Set the @var{fsm} step counter value.
@end deffn

@deffn {Scheme Procedure} fsm-transition-counter (fsm <fsm>)
Get the @var{fsm} transition counter value.
@end deffn

@deffn {Scheme Procedure} fsm-transition-counter-set! (fsm <fsm>) (value <number>)
Set the @var{fsm} transition counter value.
@end deffn

@deffn {Scheme Procedure} fsm-parent-fsm (fsm <fsm>)
Get the @var{fsm} parent FSM.
@end deffn

@deffn {Scheme Procedure} fsm-parent-fsm-set! (fsm <fsm>) (value <fsm>)
Set the @var{fsm} parent FSM.
@end deffn

@deffn {Scheme Procedure} fsm-parent-context (fsm <fsm>)
Get the @var{fsm} parent FSM context.
@end deffn

@deffn {Scheme Procedure} fsm-parent-context-set! (fsm <fsm>) (value <top>)
Set the @var{fsm} parent FSM context.
@end deffn

@deffn {Scheme Procedure} fsm-state-add! (fsm <fsm>) (state <state>)
Add a new @var{state} to the @var{fsm} state table.
@end deffn

@deffn {Scheme Procedure} fsm-state (fsm <fsm>) (name <symbol>)
Lookup a state by its @var{name} from the state table of @var{fsm}.
@end deffn

@deffn {Scheme Procedure} transition-list->hash-table @
               (fsm <fsm>) @
               (transition-list <list>)
Convert a @var{transition-list} to a hash table.
@end deffn

@deffn {Scheme Procedure} hash-table->transition-list table
Convert a hash @var{table} to a transition list of the following form:

@example lisp
   '(((name        . state1)
      (description . "description")
      (transitions . ((guard-procedure      action-procedure      next-state)
                      (guard-procedure      action-procedure      next-state)
                      ...
                      (guard-procedure      action-procedure      next-state))))
     (state1 ...))
@end example

Return the transition list.
@end deffn

@deffn {Scheme Procedure} fsm-transition-add! @
               (self            <fsm>) @
               (state-name      <symbol>) @
               (tguard          <procedure>) @
               (action          <procedure>) @
               (next-state-name <top>)

Add a new transition to a state named @var{next-state-name}, guarded by a
@var{tguard} with the specified transition @var{action}.

@var{next-state-mame} must be a name of a state that is already present in the
FSM transition table, or @code{#f} (which means that the transition is final.)

@end deffn

@deffn {Scheme Procedure} fsm-state-description-add! @
               (self        <fsm>) @
               (state-name  <symbol>) @
               (description <string>)

Add a new @var{description} to a state @var{state-name}.

@end deffn

@c -----------------------------------------------------------------------------
@subsubsection Executing a FSM

@deffn  {Scheme Procedure} fsm-step! (fsm <fsm>) event context
@deffnx {Scheme Procedure} fsm-step! (fsm <fsm>) context
Perform a single @var{fsm} step on the specified @var{event} and a
@var{context}.

If @var{event} parameter is missing, then @var{fsm} will always use event
sources specific for each state during the execution.

Returns two values: new state and new context.
@end deffn

@deffn  {Scheme Procedure} fsm-run! (fsm <fsm>) event-source context
@deffnx {Scheme Procedure} fsm-run! (fsm <fsm>) context
Run an @var{fsm} with the given @var{context} return the new context.

@var{event-source} must be a procedure that accepts a @var{context} as a
single parameter.

If @var{event-source} parameter is missing, then then @var{fsm} will always
use event sources specific for each state during the execution.

@var{context} can be any Scheme object.

Return the @var{context} after @var{fsm} execution.
@end deffn

@c -----------------------------------------------------------------------------
@subsubsection Getting information about an FSM

@deffn {Scheme Procedure} fsm-state-count (fsm <fsm>)
 Calculate the number of states in a finite state machine @var{fsm}. Return
the number of states.
@end deffn

@deffn {Scheme Procedure} fsm-transition-count (self <fsm>)
Calculate the total transition count for a finite state machine @var{fsm}.
Return the number of transitions.
@end deffn

@deffn {Scheme Procedure} fsm-incoming-transition-count self state @
               [#:include-recurrent-links?=#f]

Calculate the incoming transition count for a @var{state}. Optionally the
procedure can include recurrent links of a @var{state} to itself in the
calculation if @var{include-recurrent-links?} is set to @code{#t}.

@end deffn

@deffn {Scheme Procedure} fsm-state-reachable? (fsm <fsm>) (state <state>)
Check if a @var{state} is reachable in the finite state machine @var{fsm}.
@end deffn

@deffn {Scheme Procedure} fsm-validate (fsm <fsm>)
Validate the finite state machine @var{fsm} and return the list of errors. If
the list is empty then no errors were found.
@end deffn

@subsubsection Logging
@cindex FSM logging

@deffn  {Scheme Procedure} fsm-log-transition (from <state>) (to <state>)
@deffnx {Scheme Procedure} fsm-log-transition (from <state>) (to <symbol>)
@deffnx {Scheme Procedure} fsm-log-transition (from <state>) (to <boolean>)
Log state transitions.
@end deffn

@c Local Variables:
@c TeX-master: "guile-smc.texi"
@c End:
