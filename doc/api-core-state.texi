@c -*-texinfo-*-
@c This file is part of Guile-SMC Reference Manual.
@c Copyright (C) 2021-2022 Artyom V. Poptsov
@c See the file guile-smc.texi for copying conditions.

@node State
@section State
@cindex State

The @code{(smc core state)} module contains FSM state implementation.  The
@emph{state} term is very important in the realm of finite-state machines as
the FSMs consist of states and transitions between them.

A state can take one of two forms: it can be either a associative list or an
instance of @code{<state>} class.  There are converters between these forms.

@c -----------------------------------------------------------------------------
@subsection Actions

Basically an @emph{action} is a procedure that is called when some event
happen.

The main Guile-SMC allow to attach actions to transitions as well as to the
state entry/exit events.

Note that a state does not run its entry/exit actions when @code{state-run}
method is called because it has insufficient information about when to call
entry/exit action procedures.  Those procedures are run by a FSM that owns the
state.

@c -----------------------------------------------------------------------------
@subsection Default entry/exit actions

@deffn {Scheme Procedure} %default-entry-action context
Default state entry action that just returns a @var{context}.
@end deffn

@deffn {Scheme Procedure} %default-exit-action context
Default state exit action that just returns a @var{context}.
@end deffn

@c -----------------------------------------------------------------------------
@subsection The main class

@deftp {Class} <state> #:name @
       [#:description=#f] @
       [#:event-source=#f] @
       [#:entry-action=%default-entry-action] @
       [#:exit-action=%default-exit-action] @
       [#:transitions=#f]
This class describes an FSM state.

Constructor parameters:

@table @asis
@item #:name (name <string>)
@strong{required} Name of this state.

@item #:description (description <string>)
Description of this state.

@item #:event-source (proc <procedure>)
A procedure that returns an event.

It called by the FSM the state belongs to as follows:
@example lisp
(proc context)
@end example

@item #:entry-action (proc <procedure>)
A procedure that is called by the FSM the state belongs to when a transition
occurs to this state from another state, before running the transition table.
Note that the procedure is not called on self-transitions.

The procedure MUST return a context, which is passed to the transition table
execution.

The procedure called as follows:
@example lisp
(proc context)
@end example

@item #:exit-action (proc <procedure>)
A procedure that is called by the FSM the state belongs to when a transition
occurs from this state to another state, before running the transition table.
Note that the procedure is not called on self-transitions.

The procedure MUST return a context.

The procedure called as follows:
@example lisp
(proc context)
@end example

@item #:transitions (transitions <list>)
The transitions for this state.

@end table

@end deftp

@c -----------------------------------------------------------------------------
@subsection Public API

@deffn {Scheme Procedure} state? object
Check if @var{object} is an instance of the @code{<state>} class.
@end deffn

@deffn {Scheme Procedure} equal? state-1 state-2
Check if @var{state-1} is equal to @var{state-2}.
@end deffn

@deffn {Scheme Procedure} state-name (state <state>)
Get the state name as a @code{<string>}.
@end deffn

@deffn {Scheme Procedure} state-name (state <symbol>)
Special version of procedure that return the symbol itself.
@end deffn

@deffn {Scheme Procedure} state-has-event-source? (state <state>)
Check if a @var{state} has an event source.
@end deffn

@deffn {Scheme Procedure} state-description (state <state>)
Get the state description as a @code{<string>} if it is available, return
@code{#f} otherwise.
@end deffn

@deffn {Scheme Procedure} state-event-source (state <state>)
Get the @var{state} event source procedure.
@end deffn

@deffn {Scheme Procedure} state-event-source-set! (state <state>)
Set the @var{state} event source procedure.
@end deffn

@deffn {Scheme Procedure} state-entry-action (state <state>)
Get the @var{state} entry action procedure.
@end deffn

@deffn {Scheme Procedure} state-entry-action-set! (state <state>)
Set the @var{state} entry action procedure.
@end deffn

@deffn {Scheme Procedure} state-exit-action (state <state>)
Get the @var{state} exit action procedure.
@end deffn

@deffn {Scheme Procedure} state-exit-action-set! (state <state>)
Set the @var{state} exit action procedure.
@end deffn

@deffn {Scheme Procedure} state-transitions (state <state>)
Get the state transitions as a list.
@end deffn

@c -----------------------------------------------------------------------------

@deffn {Scheme Procedure} state-transition-add! @
               (state <state>) @
               (tguard <procedure>) @
               (action <procedure>) @
               next-state
Add a new transition to the @var{state}.

A transition consists of a transition guard @var{tguard} (which must be a
predicate) and a transition @var{action}.
@end deffn

@deffn {Scheme Procedure} state-transition-count (state <state>)
@deffnx {Scheme Procedure} state-transition-count (state <state>) to
Get the transitions count for a @var{state}.
@end deffn

@deffn {Scheme Procedure} state-transition-count/foreign (state <state>)
Get the foreign transitions count for a @var{state}.  A foreign transition is
a transition that points to another state.
@end deffn

@deffn {Scheme Procedure} state-recurrent-links-count (state <state>)
Get the number of recurrent links (that is, links that point to the state
itself) for a @var{state}.
@end deffn

@deffn {Scheme Procedure} state-has-recurrent-links? (state <state>)
Check if a @var{state} has recurrent links.
@end deffn

@deffn {Scheme Procedure} state-final-transitions (state <state>)
Get the number of final transitions for a @var{state}.
@end deffn

@deffn {Scheme Procedure} state-has-final-transitions? (state <state>)
Check if a @var{state} has any final transitions.
@end deffn

@deffn {Scheme Procedure} state-dead-end? (state <state>)
Check if a @var{state} is a dead-end state. A state is considered a dead-end
if it has no foreign transitions, has recurrent links and has no final
transitions.
@end deffn

@deffn {Scheme Procedure} state-run (state <state>) event context
Run a @var{state}.  Returns two values: next state (or @code{#f}) and new
context.
@end deffn

@c ---------------------------------------------------------------------------
@subsubsection State as a list

State serialized to an associative list of the following form:

@example lisp
   `((name         . state-name)
     (description  . "State description")
     (event-source . ,event-source:state-name)
     (entry-action . ,some-entry-action)
     (transitions
      (,guard:...    ,action:...    next-state-name-1)
      (,guard:...    ,action:...    next-state-name-1)
      (,guard:...    ,action:...    next-state-name-2)))
@end example

@deffn  {Scheme Procedure} state:name state
@deffnx {Scheme Procedure} state:description state
@deffnx {Scheme Procedure} state:transitions state
@deffnx {Scheme Procedure} state:event-source state
@deffnx {Scheme Procedure} state:entry-action state
@deffnx {Scheme Procedure} state:exit-action state
Get the corresponding element of a @var{state} alist.
@end deffn

@deffn {Scheme Procedure} state:event-source/name state
Get the name of a @var{state} event source procedure. Returns @code{#f} when
no event source is set.
@end deffn

@c ---------------------------------------------------------------------------
@subsubsection List/state conversion

@deffn {Scheme Procedure} list->state (lst <list>)
Convert a list @var{lst} to a @code{<state>} instance, return the new state.
@end deffn

@deffn {Scheme Procedure} state->list (state <state>)
Convert a @var{state} to an associative list.
@end deffn

@deffn {Scheme Procedure} state->list/serialized (state <state>)
Convert a @var{state} to an associative list, replace all the procedures with
their names.
@end deffn

@c Local Variables:
@c TeX-master: "guile-smc.texi"
@c End:
