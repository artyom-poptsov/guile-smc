#!@GUILE@ \
-e main
!#

(use-modules (ice-9 getopt-long)
             (ice-9 pretty-print)
             (ice-9 eval-string)
             (smc core log)
             (smc fsm)
             (smc cli common)
             (smc cli command-compile)
             (smc cli command-context))



(define (print-help-and-exit)
  (display "\
Usage: smc <command> [options]

Commands:
  compile        Compile a PlantUML state diagram to a Guile finite-state machine.
  context        Analyze or generate a context stub based on a given PlantUML file.
  help           Print this help message.

For each command there's '--help' option (or '-h' for short) that prints a
help message for the given command.

")
  (exit 0))



(define %commands
  `((("compile")                ,command-compile)
    (("context")                ,command-context)
    (("help", "--help", "-h")   ,(lambda (rest)
                                   (print-help-and-exit)))))


(define (main args)

  (when (< (length args) 2)
    (print-help-and-exit))

  (let* ((command (cadr args))
         (rest    (cons (car args) (cddr args)))
         (handler (command-match command %commands)))
    (if handler
        (handler rest)
        (begin
          (format (current-error-port) "Unknown command: ~a~%" command)
          (print-help-and-exit)))))

;;;

;; Local Variables:
;; mode: Scheme
;; End:

;;; smc.in ends here
